#include <iostream>
#include <limits>
#include <exception>

using namespace std;

class Int {
private:
    int value;
public:
    Int(int val) : value(val) {}

    Int operator+(const Int& other) const {
        long double result = static_cast<long double>(value) + other.value;
        if (result < numeric_limits<int>::min() || result > numeric_limits<int>::max()) {
            throw overflow_error("Арифметическое переполнение достигнуто сложением");
        }
        return Int(static_cast<int>(result));
    }
    Int operator-(const Int& other) const {
        long double result = static_cast<long double>(value) - other.value;
        if (result < numeric_limits<int>::min() || result > numeric_limits<int>::max()) {
            throw overflow_error("Арифметическое переполнение достигнуто разность");
        }
        return Int(static_cast<int>(result));
    }
    Int operator*(const Int& other) const {
        long double result = static_cast<long double>(value) * other.value;
        if (result < numeric_limits<int>::min() || result > numeric_limits<int>::max()) {
            throw overflow_error("Арифметическое переполнение достигнуто умножением");
        }
        return Int(static_cast<int>(result));
    }
    Int operator/(const Int& other) const {
        if (other.value == 0) {
            throw invalid_argument("Деление на ноль");
        }
        return Int(value / other.value);
    }

    // prefix
    Int& operator++() {
        if (value == numeric_limits<int>::max()) {
            throw overflow_error("Арифметическое переполнение достигнуто префиксом");
        }
        ++value;
        return *this;
    }
    // postfix
    Int operator++(int) {
        Int temp = *this;
        ++(*this);
        return temp;
    }

    // Output operator
    friend ostream& operator<<(ostream& os, const Int& num) {
        os << num.value;
        return os;
    }

};

int main() {
    setlocale(LC_ALL, "rus");
    try {
        Int a = 14;
        Int b = 2;

        // Test arithmetic operations
        Int sum = a + b;
        Int difference = a - b;
        Int product = a * b;
        Int quotient = a / b;

        // Test increment operators
        ++a;
        Int c = b++;

        cout << "Сумма: " << sum << endl;
        cout << "Разница: " << difference << endl;
        cout << "Произведение: " << product << endl;
        cout << "Деления: " << quotient << endl;
        cout << "Преинкремент: " << a << endl;
        cout << "ПостИнкремент: " << c << endl;
    }
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}
/*
Int a = numeric_limits<int>::max();
 */