#include <iostream>
using namespace std;

class Fraction {
private:
    double chislo;

public:
    // Constructors
    Fraction() : chislo(0) {}
    Fraction(double value) : chislo(value) {}

    // Binary arithmetic operators
    Fraction operator+(const Fraction& other) const {
        return Fraction(chislo + other.chislo);
    }

    Fraction operator-(const Fraction& other) const {
        return Fraction(chislo - other.chislo);
    }

    Fraction operator*(const Fraction& other) const {
        return Fraction(chislo * other.chislo);
    }

    Fraction operator/(const Fraction& other) const {
        if (other.chislo == 0) {
            cerr << "Деление на ноль\n";
            exit(1);
        }
        return Fraction(chislo / other.chislo);
    }

    // Unary increment operators
    Fraction& operator++() { // Prefix increment
        chislo++;
        return *this;
    }

    Fraction operator++(int) { // Postfix increment
        Fraction temp = *this;
        ++(*this);
        return temp;
    }

    // Friend function to overload operator+ for mixed-mode arithmetic
    friend Fraction operator+(const Fraction& fraction, double value) {
        return Fraction(fraction.chislo + value);
    }

    friend Fraction operator*(double value, const Fraction& fraction) {
        return Fraction(value * fraction.chislo);
    }

    // Output operator
    friend ostream& operator<<(ostream& os, const Fraction& fraction) {
        os << fraction.chislo;
        return os;
    }
};

int main() {
    setlocale(LC_ALL, "rus");
    Fraction a(3.0), b(2.5);
    double c = 4.0;

    // Test arithmetic operations with fractions
    Fraction sum = a + b;
    Fraction difference = a - b;
    Fraction product = a * b;
    Fraction quotient = a / b;

    // Test mixed-mode arithmetic
    Fraction mixed_sum = a + c;
    Fraction mixed_product = c * b;

    // Test increment operators
    ++a;
    Fraction post_increment = b++;

    // Display results
    cout << "Сумма: " << sum << endl;
    cout << "Разность: " << difference << endl;
    cout << "Умножение: " << product << endl;
    cout << "Деление: " << quotient << endl;
    cout << "Миксованая сумма: " << mixed_sum << endl;
    cout << "Миксованое умножение: " << mixed_product << endl;
    cout << "Преинкремент: " << a << endl;
    cout << "Постикремент: " << post_increment << endl;

    return 0;
}